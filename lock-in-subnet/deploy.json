{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
    },
    "variables": {
        "VNET name": "vnet",
        "Subnet name": "default",
        "Storage Account name": "[concat('funcsto', uniqueString(resourceGroup().id))]",
        "App Plan A Name": "app-plan-a",
        "App Plan B Name": "app-plan-b",
        "Function App A name": "[concat('function-app-a-', uniqueString(resourceGroup().id))]",
        "Function A name": "function-a",
        "Function App B name": "[concat('function-app-b-', uniqueString(resourceGroup().id))]",
        "Function B name": "function-b"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "name": "[variables('VNET name')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('Subnet name')]",
                        "properties": {
                            "addressPrefix": "10.0.0.0/24",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Web",
                                    "locations": [
                                        "*"
                                    ]
                                }
                            ],
                            "delegations": [
                                {
                                    "name": "delegation",
                                    "properties": {
                                        "serviceName": "Microsoft.Web/serverfarms"
                                    }
                                }
                            ],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-04-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('Storage Account name')]",
            "location": "[resourceGroup().location]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2019-08-01",
            "name": "[variables('App Plan A Name')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "size": "S1",
                "family": "S",
                "capacity": 1
            },
            "properties": {
                "name": "[variables('App Plan A Name')]",
                "computeMode": "Dynamic"
            },
            "kind": "linux"
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2019-08-01",
            "name": "[variables('App Plan B Name')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "properties": {
                "name": "[variables('App Plan B Name')]",
                "computeMode": "Dynamic"
            },
            "kind": "linux"
        },
        {
            "apiVersion": "2019-08-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('Function App A name')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Account name'))]",
                "[resourceId('Microsoft.Web/sites/functions', variables('Function App B name'), variables('Function B name'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('App Plan A Name'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('App Plan A Name'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsSecretStorageType",
                            "value": "Files"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('Storage Account name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Account name')), '2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('Storage Account name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Account name')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('Function App A name'))]"
                        },
                        {
                            "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "target-url",
                            "value": "[listSecrets(resourceId('Microsoft.Web/sites/functions', variables('Function App B name'), variables('Function B name')), '2019-08-01').trigger_url]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "functions",
                    "apiVersion": "2019-08-01",
                    "name": "[variables('Function A name')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('Function App A name'))]"
                    ],
                    "properties": {
                        "config": {
                            "bindings": [
                                {
                                    "authLevel": "function",
                                    "name": "request",
                                    "type": "httpTrigger",
                                    "direction": "in",
                                    "methods": [
                                        "get"
                                    ]
                                },
                                {
                                    "name": "res",
                                    "type": "http",
                                    "direction": "out"
                                }
                            ]
                        },
                        "files": {
                            "run.csx": "#r \"System.Text.Json\"\n\nusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\n\n//  Using https://codebeautify.org/csharp-escape-unescape/ to compress\n//  into a one-liner for ARM Template\n//  Post process:  need to replace \\' by ' as it fails in ARM Templates\npublic static async Task<IActionResult> Run(\n    HttpRequest request,\n    ILogger log)\n{\n    log.LogInformation(\"Function A triggered\");\n\n    var targetUrl = Environment.GetEnvironmentVariable(\"target-url\");\n\n    if (string.IsNullOrWhiteSpace(targetUrl))\n    {\n        throw new ArgumentNullException(\"target-url\");\n    }\n\n    var client = new HttpClient();\n\n    //  Send events to Event Grid Topic\n    var response = await client.GetAsync(targetUrl);\n\n    if (response.StatusCode != HttpStatusCode.OK)\n    {\n        var output = await response.Content.ReadAsStringAsync();\n\n        return new BadRequestObjectResult($\"Error calling function B:  {output}\");\n    }\n    else\n    {\n        var output = await response.Content.ReadAsStringAsync();\n\n        log.LogInformation($\"Function B returned {output}\");\n\n        return new OkObjectResult($\"Function B returned {output}\");\n    }\n}"
                        },
                        "isDisabled": false
                    }
                },
                {
                    "type": "virtualNetworkConnections",
                    "apiVersion": "2018-11-01",
                    "name": "[variables('VNET name')]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('Function App A name'))]"
                    ],
                    "properties": {
                        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNET name'), variables('Subnet name'))]",
                        "isSwift": true
                    }
                }
            ]
        },
        {
            "apiVersion": "2019-08-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('Function App B name')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Account name'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('App Plan B Name'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('App Plan B Name'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsSecretStorageType",
                            "value": "Files"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('Storage Account name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Account name')), '2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('Storage Account name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Account name')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('Function App B name'))]"
                        },
                        {
                            "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                            "value": "~2"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "functions",
                    "apiVersion": "2019-08-01",
                    "name": "[variables('Function B name')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('Function App B name'))]"
                    ],
                    "properties": {
                        "config": {
                            "bindings": [
                                {
                                    "authLevel": "function",
                                    "name": "request",
                                    "type": "httpTrigger",
                                    "direction": "in",
                                    "methods": [
                                        "get"
                                    ]
                                },
                                {
                                    "name": "res",
                                    "type": "http",
                                    "direction": "out"
                                }
                            ]
                        },
                        "files": {
                            "run.csx": "#r \"System.Text.Json\"\n\nusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\n\n//  Using https://codebeautify.org/csharp-escape-unescape/ to compress\n//  into a one-liner for ARM Template\n//  Post process:  need to replace \\' by ' as it fails in ARM Templates\npublic static async Task<IActionResult> Run(\n    HttpRequest request,\n    ILogger log)\n{\n    log.LogInformation(\"Function B triggered\");\n\n    var client = new HttpClient();\n    \n    return new OkObjectResult($\"42\");\n}"
                        },
                        "isDisabled": false
                    }
                },
                {
                    "type": "config",
                    "apiVersion": "2018-11-01",
                    "name": "web",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('Function App B name'))]"
                    ],
                    "properties": {
                        "ipSecurityRestrictions": [
                            {
                                "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNET name'), variables('Subnet name'))]",
                                "action": "Allow",
                                "tag": "Default",
                                "priority": 100,
                                "name": "lock-to-subnet",
                                "description": "Locking from subnet"
                            }
                        ]
                    }
                }
            ]
        }
    ]
}